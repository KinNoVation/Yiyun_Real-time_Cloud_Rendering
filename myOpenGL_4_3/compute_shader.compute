#version 430
layout (local_size_x = 1, local_size_y = 1) in;
layout (rgba32f, binding = 0) uniform image2D img_output;

uniform 

struct Ray
{
	vec3 origin;
	vec3 direction;
};

struct RayHit
{
	vec3 position;
	float alpha;
	float distance;
	float entryPoint;
	float exitPoint;
};

Ray CreateRay(vec3 origin, vec3 direction)
{
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	return ray;
}

RayHit CreateRayHit()
{
	RayHit hit;
	hit.position = vec3(0,0,0);
	hit.alpha = 0;
	hit.distance = 999;
	hit.entryPoint = 0;
	hit.exitPoint = 999;
	return hit;
}

struct Box
{
	vec3 position;
	vec3 scale;
};

Box CreateBox(vec3 position, vec3 scale)
{
	Box box;
	box.position = position;
	box.scale = scale;
	return box;
}

void IntersectBox(Ray ray, inout RayHit bestHit, Box box)
{
	vec3 minBound = box.position - box.scale;
	vec3 maxBound = box.position + box.scale;

	vec3 t0 = (minBound - ray.origin) / ray.direction;
	vec3 t1 = (maxBound - ray.origin) / ray.direction;

	vec3 tsmaller = min(t0, t1);
	vec3 tbigger = max(t0, t1);

	float tmin = max(tsmaller[0], max(tsmaller[1], tsmaller[2]));
    float tmax = min(tbigger[0], min(tbigger[1], tbigger[2]));

	if(tmin > tmax) return;

	// else
	// Hit a box!
	if(tmax > 0 && tmin < bestHit.distance)
	{
		if(tmin < 0) tmin = 0;
		bestHit.distance = tmin;
		bestHit.position = ray.origin + bestHit.distance * ray.direction;
		bestHit.alpha = 1;
		// For volumetric rendering
		bestHit.entryPoint = tmin;
		bestHit.exitPoint = tmax;
	}
}

RayHit CastRay(Ray ray)
{
	RayHit bestHit = CreateRayHit();
	Box box = CreateBox(vec3(0,0,2),vec3(0.5,0.2,0.5));
	IntersectBox(ray, bestHit, box);
	return bestHit;
}

void main ()
{
	ivec2 pixel_coords = ivec2 (gl_GlobalInvocationID.xy);

	float max_x = 5.0;
	float max_y = 5.0;
	ivec2 dims = imageSize (img_output);
	float x = (float(pixel_coords.x * 2 - dims.x) / dims.x);
	float y = (float(pixel_coords.y * 2 - dims.y) / dims.y);

	vec3 cameraPos = vec3(0.0, 0.0, -1);
	vec3 pixelPos = vec3(x, y, 0.0);
	Ray ray = CreateRay(cameraPos, pixelPos - cameraPos);
	RayHit hit = CreateRayHit();
	hit = CastRay(ray); 

	vec4 pixel_color = vec4(ray.direction, 1.0);
	if(hit.alpha != 0)
	{
		pixel_color = vec4(1,1,1, 1.0);
	}


	imageStore (img_output, pixel_coords, pixel_color);
}